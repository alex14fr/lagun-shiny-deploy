   This server runs multiple apps:

   [1]Lagun with the following changes (see loadPackages.R, app.R and
   evaluateDOE.R):
     * don't use renv; all dependencies are at their latest version on
       CRAN
     * send keepalive messages on the websocket every 140 s
     * replace fOptions package for quasi-random sequences

   an R terminal in apps/terminal:
     * uses [2]ttyd and provides you with an R terminal on the web
     * if needed use system("sh") to go to a shell prompt.
     * it supports sending/receiving files via ZMODEM (use system("lrz"),
       resp. system("lsz ") at the R prompt to receive/send files from
       your browser). Use it to import your R code/data and export your
       plots and computation results. Only /tmp is writable, and this
       directory lives no more than 25 hours.
     * No network access is permitted in this app (so no install.packages
       from CRAN other than the preinstalled packages).
     * Each terminal session runs in a separate container.
     * The launcher for this app is in apps/terminal/launch0.
     * R integrated help is stripped to save space; you are supposed to
       have an online browser anyway.

   Each app is run in a separate container; it consists of an R process
   (or ttyd process) listening on a Unix domain socket.

   An HTTP frontend server (source in src/relayttpd.c) dispatches requests
   from outside TCP connections to these Unix sockets, depending on the
   leading directory of the requested URL. The correspondance between
   leading directories and Unix sockets is given on the command line (see
   variable args in entry_multi).

   This server also serves a static HTML page (in /tmp/index.html,
   generated by entry_multi) as home page, and supports cacheing of the
   homepages of each app (src/httpget.c, triggered by entry_multi, is used
   to populate this cache, in plain and gzip encoding variants); this
   cache is helpful for apps like Lagun which do not change their HTTP
   replies on / but are quite slow to start up.
   To run this server on your premises (Linux only), you may download the
   prebuilt x86_64 rootfs file at [3]shiny-rootfs.tar.xz, then use
   $ tar xf shiny-rootfs.tar.xz
   $ doas cp -a /dev/*random /dev/ptmx rootfs/dev/
   $ ./99_enter_pivotroot /entry_multi # or use your favorite container runtime

   or use the included Dockerfile.

   You can customize the apps in the "/apps" directory of the rootfs. A
   template "testapp" is included, remove the "off" file to get it run.
   The rootfs can also be built with
   # create the [4]Alpine Linux build chroot
   $ ./01_mkbuild
   # build R and required R packages
        $ ./02_build
   # extract files in distroless rootfs
        $ ./03_mkroot

   root privileges are required to create some special nodes in /dev/ (the
   scripts will use doas to do this, run them as normal user).

   The build is not made in a safe container (no pivot_root/umount, no
   capability drop, no seccomp, no IPC/network isolation...), don't run it
   as privilegied user.

   Dependencies for the build: Linux kernel with namespaces (mount, user,
   PID), usual utilities (including unshare(1)), git, rsync, opendoas (or
   sudo symlinked to doas).

   [5]Main source repository

   Author : [6]Alexandre Janon

References

   1. https://gitlab.com/drti/lagun
   2. https://tsl0922.github.io/ttyd/
   3. https://janona.perso.math.cnrs.fr/shiny-rootfs.tar.xz
   4. https://alpinelinux.org/
   5. https://github.com/alex14fr/lagun-shiny-deploy
   6. mailto:alexandre[.]janon[at]u-psud[.]fr
