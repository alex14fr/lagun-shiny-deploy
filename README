This downloads, builds, and create a chroot for a R/Shiny/Lagun/TTYd server 
listening on *:8080.

The rootfs is built from Alpine Linux distribution <https://alpinelinux.org>.

Dependencies : Linux kernel with namespaces (mount, user, PID), usual utilities 
(including unshare(1)), git, rsync, opendoas (or sudo symlinked to doas).

The build is not made in a safe container (no pivot_root/umount, no capability 
drop, no seccomp, no IPC/network isolation...), don't run it as privilegied 
user.

root privileges are required to create /dev/{random,urandom,full,null,zero} 
(the scripts will use doas to do this, run them as normal user).

To create the build chroot and build the beast, run :
   $ ./01_mkbuild && ./02_build

Then, to extract the relevant files in a rootfs directory, and create 
rootfs.tar.xz, run
   $ MAKEDEV=1 ./03_mkroot
(again, you'll need to be able to doas root to create the same special nodes in 
rootfs/dev)

and test using (unsafe container, see above):
   $ ./99_enter_rootfs /entry

If you use a proper container runtime (recommended), to create rootfs you can 
run
   $ ./03_mkroot
since /dev will be populated by your runtime anyway.

The included Dockerfile can be used to create a container from the built 
rootfs.tar.xz available at 
<https://janona.perso.math.cnrs.fr/shiny-rootfs.tar.xz>.

Changes in Lagun (see loadPackages.R, app.R and evaluateDOE.R):

 - don't use renv; all dependencies are at their latest version on CRAN
 - send keepalive messages on the websocket every 140 s
 - replace fOptions package for quasi-random sequences

"entry_*" files :

 - entry : just launch a Shiny/Lagun server

 - entry_multi : launch multiple "apps":

      - Lagun 
      - an "testapp" in apps/testapp 
      - an "hidden" R terminal in apps/terminal: 
         - uses ttyd <https://tsl0922.github.io/ttyd/> and provides 
you with an R terminal on the web
         - if needed use system("sh") to go to a shell prompt.
         - it supports sending/receiving files via ZMODEM (use 
system("lrz"), resp. system("lsz <file>") at the R prompt to receive/send files 
from your browser). Use it to import your R code/data and 
export your plots and computation results. Only /tmp is writable, and this
directory lives no more than 25 hours.
         - No network access is permitted in this app (so no install.packages 
from CRAN other than the preinstalled packages).
		   - The launcher for this app is in apps/terminal/launch0.

    Each app is run in a separate container; it consists of an R process (or 
ttyd process) listening on a Unix domain socket. 

    An HTTP frontend server (source in src/relayttpd.c) dispatches 
requests from outside TCP connections to these Unix sockets, depending on the 
leading directory of the requested URL. The correspondance between leading 
directories and Unix sockets is given on the command line (see variable args in 
entry_multi).

    This server also serves a static HTML page (in /tmp/index.html, 
generated by entry_multi) as home page, and supports cacheing of the homepages 
of each app (src/httpget.c, triggered by entry_multi, is used to populate this 
cache, in plain and gzip encoding variants); this cache is helpful for apps 
like Lagun which do not change their HTTP replies on / but are quite slow to 
start up.

    All these parts are Linux-only: heavy usage of namespaces, and relayttpd 
uses sendfile()/epoll().


Author : Alexandre Janon <alexandre . janon at u-psud . fr>



